{
  "name": "netbeast",
  "version": "0.0.6",
  "description": "Resources for node.js wrapper",
  "main": "index.js",
  "scripts": {
    "test": "npm test",
    "app": "node index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/netbeast/nb-resources.git"
  },
  "keywords": [
    "netbeast",
    "resources",
    "iot",
    "home",
    "automation"
  ],
  "author": {
    "name": "staff@netbeast.co"
  },
  "license": "GPL3",
  "bugs": {
    "url": "https://github.com/netbeast/nb-resources/issues"
  },
  "homepage": "https://github.com/netbeast/nb-resources",
  "dependencies": {
    "async": "^1.4.2",
    "bluebird": "^2.10.0",
    "body-parser": "^1.14.0",
    "chai": "^3.2.0",
    "commander": "^2.8.1",
    "express": "^4.13.3",
    "fs": "0.0.2",
    "http": "0.0.0",
    "mocha": "^2.3.2",
    "morgan": "^1.6.1",
    "request": "^2.62.0",
    "socket.io": "^1.3.7"
  },
  "readme": "# Node.js wrapper\n\n## About this Docs\n\nThe main goal of this documentation is to explain how the Netbeast API works. All the information that you need to start programming has been gathered here.\n\nThis API is quite new so it is continuously changing and growing. As it matures, some parts are more reliable tan others. Some methods are very new and could be redesigned in the future. Others are so tested and stable. You will see a stability index through all the documentation. We have defined the stability index as follow:\n\n*   3 - reliable\n*   2 - experimental\n*   1 - deprecated\n\n### Supported devices\n\nWith this API you can control this devices\n\n-   [x] Philips Hue\n-   [x] Belkin WeMo\n    -   [x] Switch\n    -   [x] Insight\n    -   [x] Bulbs\n-   [ ] Parrot Flower Power\n-   [ ] Chromecast\n-   [ ] Sonos\n-   [ ] Lifx\n-   ...\n\n### How to use it?\n\nFirst of all, you need to install the npm package.\n````\nsudo npm install netbeast -g\n````\n Once the package is in the node_modules folder, you can require it from the code. You are able to require all the methods or only some specific areas.\n\n````javascript\n//  Option 1\nvar nb = require('netbeast')\n\nnb.resources('lights').get()\n\n//  Option 2\nvar resources = require('netbeast/lib/resources')\nvar scene = require('netbeast/lib/scene')\nvar devices = require('netbeast/lib/devices')\n\nresources('lights').get()\n````\n\n## Methods\n\n### Arguments\n\nEach device can support specific parameters.\nBridge or Switch can be switched on or off. If you try to set an unsupported parameter to a switch (for example the brightness, .set({bri: 255})) you will return a soft error. The process keep working but send you a warning.\n\nHere is a list of supported arguments for each device.\n*   switch & bridge\n    * on - true/false\n*   Bulbs\n    * on    - true/false\n    * bri   - 0-255\n    * hue   - 0-65535   (color bulbs)\n    * sat   - 0-255     (color bulbs)\n\nA example of use:\n````javascript\nnb.resources('lights').set({on: true, bri: 200, hue: 0, sat: 255})\n````\n If you have white and color bulbs, the first ones are going to switch on and change the brightness. The color bulbs will also change their color to red and the execution continues without problems.\n\n\n### Output\n\nAll the methods act as a promise and they always return a json object like this:\n```javascript\n{\n    error:  \n    data:\n}\n```\n\n### Devices\nThis object include useful methods for managing different aspects of the Smart devices\n\n#### devices.group(name , devicesId)\nThis functión allows us to make group of devices. The argument name defines de group name. DevicesId will be an array of ids of the devices that should be grouped.\n\n````javascript\nvar nb = require('netbeast')\n\nvar args = [1,3, 7 }\n\nnb.devices().group('roof', args)\n.then(function (data) {}\n.catch(function (error) {}\n````\n\n#### devices.discover([brand-name])\n\nThis function allows us to activate the discovery process. With the brand-name parameter you can specify a concrete app (like belkin-wemo, philips-hue). If you don´t include this argument, the discovery will be apply to all available brands.\n\n````javascript\nvar nb = require('netbeast')\n\nnb.devices().discovery('belkin-wemo')\n.then(function (data) {}\n.catch(function (error) {}\n````\n\n### Resources\n\nA resource contain information about every smart device connected through the dashboard. It has the following fields:\n\nProperty    |  Description  |   Values  |   Default\n------------|---------------|-----------|----------\nid          | Identifies the resource in the db | Integer (automatic) | -\napp         | show the device brand | String (belkin-wemo, philips-hue) | -\nlocation    | Location of the devices in the house | String (up to developer) | none\ntopic       | Define the device field of actuation | String (lights.bridge,switch) | -\ngroup       | Resources can be grouped | String (up to developer) | none\n\nResources has methods for:\n*   Obtain the current state of devices, for expample\n````javascript\nresources('lights').get()\n````\n*   Change the current state of devices, for example\n````javascript\nresources('switch').set({on: true})\n````\n*   Select a device through its group or location, for example\n````javascript\nresources('lights').at('kitchen').get('bri')\n````\n\n##### resources([topic]).at(location).METHOD\n\nThis method allows us to select a group of devices form a specific location. It can´t be used alone and should be follow by other method.\n\n````javascript\nvar nb = require('netbeast')\n\nnb.resources('lights').at('bedroom').get()\n.then(function (data) {}\n.catch(function (error) {}\n````\n\n\nIn this example, we get information about all the lights placed at the kitchen.\n\n#### resources([topic]).delete([args])\n\nThe delete method allow us to remove resources from the database. You can use an argument (args: json object) for this method that select an specific property of devices.\n\n````javascript\nvar nb = require('netbeast')\n\n// Remove all the lights\nnb.resources('lights').delete()\n.then(function (data) {}\n.catch(function (error) {}\n\n// Remove all the belkin-wemo lights group by 'colorful'\n\nvar args = { app: 'belkin-wemo'}\n\nnb.resources('lights').groupBy('colorful').delete(args)\n.then(function (data) {}\n.catch(function (error) {}\n````\n\n#### resources([topic]).deleteById(id)\n\nThe deleteById method allows us to remove resources from the database. With the id argument we select a specific device from the db.\n\n````javascript\nvar nb = require('netbeast')\n\nnb.resources().deleteById(1)\n.then(function (data) {}\n.catch(function (error) {}\n````\n\nThe topic is useless on this method.\n\n#### resources([topic]).get([value])\n\nThe get method allows us to obtain information about the current state of the devices. You can obtain all the data about the state or specify a concrete value.\n\n````javascript\nvar nb = require('netbeast')\n\n// Returns the state of all lights\nnb.resources('lights').get()\n.then(function (data) {}\n.catch(function (error) {}\n\n// Returns the brightness of all the lights\nvar nb = require('netbeast')\n\nnb.resources('lights').get('bri')\n.then(function (data) {}\n.catch(function (error) {}\n````\n You can only ask for one value.  nb.resources('lights').get('on', 'bri') is not allowed.\n\n#### resources([topic]).getById(id)\n\nThe getById method allows us to get information about the current state of the devices. You will receive all the information of the specified device.\n\n````javascript\nvar nb = require('netbeast')\n\nnb.resources().getById(1)\n.then(function (data) {}\n.catch(function (error) {}\n````\n\nThe topic is useless on this method.\n\n#### resources([topic]).groupBy(name).METHOD\n\nThis method allows us to select devices form a specific group. It can´t be used alone and should be follow by other method.\n\n````javascript\nvar nb = require('netbeast')\n\nnb.resources('lights').groupBy('roof').set({on: 1})\n.then(function (data) {}\n.catch(function (error) {}\n````\n\nIn this example, we switch all the lights of the group ‘roof’ on.\n\n#### resources([topic]).set(args)\n\nThe set method allows us to change the current state of the devices. You can modify different values at the same time.\n\n````javascript\nvar nb = require('netbeast')\n\n// Change the brightness of all lights\nnb.resources('lights').set({bri: 255})\n.then(function (data) {}\n.catch(function (error) {}\n\n//  Change the brightness and color of all the lights\nvar nb = require('netbeast')\n\nnb.resources('lights').set({bri: 200, hue: 65000, sat: 255})\n.then(function (data) {}\n.catch(function (error) {}\n````\n\n#### resources([topic]). setById(id, args)\n\nThe setById method allows us to change the current state of the given device. You can modify different values of the specified device.\n\n````javascript\nvar nb = require('netbeast')\n\nvar args = { on: 1, bri: 50 }\n\nnb.resources().setById(1, args)\n.then(function (data) {}\n.catch(function (error) {}\n````\n\nThe topic is useless on this method.\n\n### Scenes\n\nA Scene is a snapshot of the current state of a group of devices. It allows you to save your favorites configuration to be accessed easily. The scenes database its composed by the following fields:\n\nProperty | Description | Values | Default\n---------|-------------|--------|--------\nid | Identifies the resource in the db | Integer (automatic) | -\nsceneid | show the name of the scene | String | -\nlocation | Location of the scene in the house | String (up to developer) | none\non | show if the device is on or off | Boolean\t| -\nbri\t| Stores the brightness value | Integer |\t-\nhue\t| Stores the hue value | Integer | -\nsat\t| Stores the saturation value | Integer | -\n\nA given device could be part of different scenes.\n\nThe parameters *hue* and *sat* are used to define the colors.\n\n#### scene(sceneid).addDevice(id)\n\nThe addDevice method allows us to add a new device to the selected scene. You must pass the id of the device and it will save the current state of it on the db.\n\n````javascript\nvar nb = require('netbeast')\n\nnb.scene('watchfilm').addDevice(2)\n.then(function (data) {}\n.catch(function (error) {}\n````\n\n#### scene(sceneid).apply()\n\nThis method apply the configuration of the given scene.\n\n````javascript\nvar nb = require('netbeast')\n\nnb.scene('watchfilm').apply()\n.then(function (data) {}\n.catch(function (error) {}\n````\n\n#### scene(sceneid).create(ids)\n\nThis method is used to create a new scene by passing an array of device ids. It takes the current state of the given devices and store the scene in the db with the 'seceneid' name.\n\n````javascript\nvar nb = require('netbeast')\n\nvar devices = [1, 2, 6, 9]\n\nnb.scene('watchfilm').create(devices)\n.then(function (data) {}\n.catch(function (error) {}\n````\n\n#### scene(sceneid).createCustom(state)\n\nWith this method you can create a new scene with a predefined state. *state* is an object array that contains the object id and the state of each device.\n\n````javascript\nvar nb = require('netbeast')\n\nvar newscene = [ {\n    id: 1,\n    on: 1,\n    bri: 254,\n    hue: 4753,\n    sat: 254 },\n    {\n    id: 8,\n    on: 1,\n    bri: 254}]\n\n\nnb.scene('watchfilm').createCustom(newscene)\n.then(function (data) {}\n.catch(function (error) {}\n````\n\n#### scene(sceneid).delete()\n\nWith delete you can remove a given scene from the db\n\n````javascript\nvar nb = require('netbeast')\n\nnb.scene('watchfilm').delete()\n.then(function (data) {}\n.catch(function (error) {}\n````\n\n#### scene(sceneid).deleteDevice(id)\n\nInstead of removing the whole scene, you are able to quit one device from the scene.\n\n````javascript\nvar nb = require('netbeast')\n\nnb.scene('watchfilm').deleteDevice(6)\n.then(function (data) {}\n.catch(function (error) {}\n````\n\n\n#### scene(sceneid).get()\n\nThis methods returns all the information about the scene.\n\n````javascript\nvar nb = require('netbeast')\n\nnb.scene('watchfilm').get()\n.then(function (data) {}\n.catch(function (error) {}\n````\nget has no arguments.\n\n#### scene().getScenes()\n\nThe getScenes method return the name of all the scenes registered on the db.\nArguments are not needed on this function.\n\n````javascript\nvar nb = require('netbeast')\n\nnb.scene().getScene()\n.then(function (data) {}\n.catch(function (error) {}\n````\n",
  "readmeFilename": "README.md",
  "_id": "netbeast@0.0.6",
  "_from": "netbeast@^0.0.6"
}
